<#import "util/codegenUtil.ftl" as codegenUtil>
<#assign camelClassName=codegenUtil.underscore2Camel(tableDetail.objectName) tableName=tableDetail.objectName />
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<!--    This file generated by program.   -->
<!--         Do Not Modify It.            -->
<!-- Genertion Time : ${generateTime?string["yyyy-MM-dd HH:mm:ss"]} -->
<mapper namespace="${packageName}.${camelClassName?cap_first}BaseDao">

    <resultMap id="vo" type="${camelClassName}Vo">
        <#list tableDetail.columns as col>
            <#if codegenUtil.isPk(col, tableDetail.primaryKeys) == true>
                <id column="${col.columnName}" property="${codegenUtil.underscore2Camel(col.columnName)}" />
            </#if>
        </#list>
        <#list tableDetail.columns as col>
            <#if codegenUtil.isPk(col, tableDetail.primaryKeys) == false>
                <result column="${col.columnName}" property="${codegenUtil.underscore2Camel(col.columnName)}" />
            </#if>
        </#list>
    </resultMap>

    <sql id="columnsAlias">
        ${codegenUtil.getAliasColumnStr(tableDetail.columns, 2)}
    </sql>

    <select id="query" resultMap="vo">
        select
        <include refid="columnsAlias">
            <property name="alias" value="${camelClassName}"/>
            <property name="prefix" value=""/>
        </include>
        from ${tableName} ${camelClassName}
        <trim prefix="where" prefixOverrides="and | or">
            <#list tableDetail.columns as col>
                <if test="${codegenUtil.underscore2Camel(col.columnName)}!=null">and ${col.columnName}=${codegenUtil.wrapSqlToDate(col.sqlType, col.columnName, "#{" + codegenUtil.underscore2Camel(col.columnName) + "}")}</if>
            </#list>
        </trim>
    </select>

    <select id="listAll" resultMap="vo">
        select
        <include refid="columnsAlias">
            <property name="alias" value="${camelClassName}"/>
            <property name="prefix" value=""/>
        </include>
        from ${tableName} ${camelClassName}
    </select>

    <select id="count" resultType="Integer">
        select count(*)
        from ${tableName}
        <trim prefix="where" prefixOverrides="and | or">
            <#list tableDetail.columns as col>
                <if test="${codegenUtil.underscore2Camel(col.columnName)}!=null">and ${col.columnName}=${codegenUtil.wrapSqlToDate(col.sqlType, col.columnName, "#{" + codegenUtil.underscore2Camel(col.columnName) + "}")}</if>
            </#list>
        </trim>
    </select>

    <insert id="insert"${codegenUtil.generatedKeySetting(tableDetail.columns)}>
        insert into ${tableName} (
        <trim prefix="" prefixOverrides=",">
            <#list tableDetail.columns as col>
                <#if col.columnName=="create_mem">
                    <if test="createMem!=null and createUser==null">, create_mem</if>
                <#else>
                    <if test="${codegenUtil.underscore2Camel(col.columnName)}!=null">, ${col.columnName}</if>
                </#if>
            </#list>
        </trim>
        ) values (
        <trim prefix="" prefixOverrides=",">
            <#list tableDetail.columns as col>
                <#if col.columnName=="create_mem">
                    <if test="createMem!=null and createUser==null">, ${r"#{createMem}"}</if>
                <#else>
                    <if test="${codegenUtil.underscore2Camel(col.columnName)}!=null">, ${codegenUtil.wrapSqlToDate(col.sqlType, col.columnName, "#{" + codegenUtil.underscore2Camel(col.columnName) + "}")}</if>
                </#if>
            </#list>
        </trim>
        )
    </insert>

    <delete id="delete">
        delete from ${tableName}
        <trim prefix="where" prefixOverrides="and">
            <#list tableDetail.columns as col>
                <if test="${codegenUtil.underscore2Camel(col.columnName)}!=null">and ${col.columnName}=${codegenUtil.wrapSqlToDate(col.sqlType, col.columnName, "#{" + codegenUtil.underscore2Camel(col.columnName) + "}")}</if>
            </#list>
        </trim>
    </delete>

    <#if tableDetail.primaryKeys?size gt 0 >
        <#assign setColStr=codegenUtil.getSetColString(tableDetail.primaryKeys tableDetail.columns 3)/>

        <select id="getByPk" resultMap="vo">
            select
            <include refid="columnsAlias">
                <property name="alias" value="${camelClassName}"/>
                <property name="prefix" value=""/>
            </include>
            from ${tableName} ${camelClassName}
            where
            ${setColStr}
        </select>

        <delete id="deleteByPk">
            delete from ${tableName}
            where
            ${setColStr}
        </delete>

        <update id="update">
            update ${tableName}
            <trim prefix="set" prefixOverrides=",">

                <#assign allColumnName = [] />
                <#list tableDetail.columns as col>
                    <#assign allColumnName = allColumnName + [ col.columnName ] />
                </#list>
                <#list tableDetail.columns as col>
                    <#if codegenUtil.isPk(col, tableDetail.primaryKeys) == false>
                        <#if col.columnName=="update_user" && allColumnName?seq_contains("update_mem")>
                            <if test="updateUser!=null">, ${col.columnName}=${codegenUtil.wrapSqlToDate(col.sqlType, col.columnName, "#{" + codegenUtil.underscore2Camel(col.columnName) + "}")}, update_mem=NULL</if>
                        <#elseif col.columnName=="update_mem">
                            <if test="updateUser==null">, ${col.columnName}=${codegenUtil.wrapSqlToDate(col.sqlType, col.columnName, "#{" + codegenUtil.underscore2Camel(col.columnName) + "}")}, update_user=NULL</if>
                        <#elseif (col.sqlType="timestamp without time zone" && !col.columnName?ends_with("_timestamp")) || col.sqlType="text" || col.sqlType="character" || col.sqlType="character varying">
                            <if test="${codegenUtil.underscore2Camel(col.columnName)}!=null">
                                <if test="${codegenUtil.underscore2Camel(col.columnName)}!=''">, ${col.columnName}=${codegenUtil.wrapSqlToDate(col.sqlType, col.columnName, "#{" + codegenUtil.underscore2Camel(col.columnName) + "}")}</if>
                                <if test="${codegenUtil.underscore2Camel(col.columnName)}==''">, ${col.columnName}=null</if>
                            </if>
                        <#else>
                            <if test="${codegenUtil.underscore2Camel(col.columnName)}!=null">, ${col.columnName}=${codegenUtil.wrapSqlToDate(col.sqlType, col.columnName, "#{" + codegenUtil.underscore2Camel(col.columnName) + "}")}</if>
                        </#if>
                    </#if>
                </#list>
            </trim>
            where
            ${setColStr}
        </update>

        <update id="forceUpdate">
            update ${tableName}
            <trim prefix="set" prefixOverrides=",">
                <#list tableDetail.columns as col>
                    <#if codegenUtil.isPk(col, tableDetail.primaryKeys) == false && col.columnName != "create_user" && col.columnName != "create_date" && col.columnName !="create_mem">
                        <#if (col.sqlType="timestamp without time zone" && !col.columnName?ends_with("_timestamp")) || col.sqlType="text" || col.sqlType="character" || col.sqlType="character varying">
                            <if test="${codegenUtil.underscore2Camel(col.columnName)}!=''">, ${col.columnName}=${codegenUtil.wrapSqlToDate(col.sqlType, col.columnName, "#{" + codegenUtil.underscore2Camel(col.columnName) + "}")}</if>
                            <if test="${codegenUtil.underscore2Camel(col.columnName)}==''">, ${col.columnName}=null</if>
                        <#else>
                            , ${col.columnName}=${codegenUtil.wrapSqlToDate(col.sqlType, col.columnName, "#{" + codegenUtil.underscore2Camel(col.columnName) + "}")}
                        </#if>

                    </#if>
                </#list>
            </trim>
            where
            ${setColStr}
        </update>
    </#if>
    
</mapper>
