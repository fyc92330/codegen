<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="org.chun.codegen.common.dao.MetaDao">

    <resultMap id="metaUserObjectMap" type="org.chun.codegen.common.vo.MetaTable">
        <result column="object_name" property="objectName"/>
        <result column="object_type" property="objectType"/>
    </resultMap>

    <resultMap id="metaTableColumnMap" type="org.chun.codegen.common.vo.MetaTableColumn">
        <result column="column_name" property="columnName"/>
        <result column="table_name" property="tableName"/>
        <result column="data_type" property="dataType" typeHandler="org.chun.codegen.handler.DataTypeHandler"/>
        <result column="sql_type" property="sqlType"/>
        <result column="data_length" property="dataLength"/>
        <result column="nullable" property="nullable"/>
        <result column="data_precision" property="dataPrecision"/>
        <result column="data_scale" property="dataScale"/>
        <result column="column_comment" property="columnComment"/>
    </resultMap>

    <resultMap id="metaConstraintColumnMap" type="org.chun.codegen.common.vo.MetaConstraintColumn">
        <result column="constraint_name" property="constraintName"/>
        <result column="table_name" property="tableName"/>
        <result column="column_name" property="columnName"/>
    </resultMap>

    <resultMap id="tableWithColumns" type="org.chun.codegen.common.vo.MetaTable" extends="metaUserObjectMap">
        <collection property="columns" columnPrefix="COL_" resultMap="metaTableColumnMap" />
        <collection property="primaryKeys" columnPrefix="CONS_"  resultMap="metaConstraintColumnMap" />
    </resultMap>

    <select id="listTableWithColumn" resultMap="tableWithColumns">
        SELECT
            cols.TABLE_NAME AS OBJECT_NAME,
            'TABLE' AS OBJECT_TYPE,
            cols.COLUMN_NAME AS COL_COLUMN_NAME,
            cols.DATA_TYPE AS COL_SQL_TYPE,
            NUMERIC_PRECISION AS COL_DATA_PRECISION,
            NUMERIC_SCALE AS COL_DATA_SCALE,
            ccu.CONSTRAINT_NAME AS CONS_CONSTRAINT_NAME,
            ccu.TABLE_NAME AS CONS_TABLE_NAME,
            ccu.COLUMN_NAME AS CONS_COLUMN_NAME,
            ORDINAL_POSITION AS COLUMN_ID,
            CASE cols.is_nullable
                WHEN 'NO'  THEN 'N'
                WHEN 'YES'  THEN 'Y'
            END AS COL_NULLABLE,
            CASE DATA_TYPE
                WHEN  'bytea' 						THEN DATA_TYPE
                WHEN  'timestamp without time zone' THEN DATA_TYPE
                WHEN  'real' 						THEN DATA_TYPE
                WHEN  'smallint' 					THEN DATA_TYPE
                WHEN  'integer' 					THEN DATA_TYPE
                WHEN  'text' 						THEN DATA_TYPE
                WHEN  'bigint'						THEN DATA_TYPE
                WHEN  'double precision' 			THEN DATA_TYPE
                WHEN  'numeric' 					THEN coalesce(DATA_TYPE, 'A') || '(' || coalesce(numeric_precision, 0) || ',' || coalesce(numeric_scale, 0) || ')'
                WHEN  'character' 					THEN coalesce(DATA_TYPE, 'character')
                WHEN  'character varying' 			THEN coalesce(DATA_TYPE, 'character')
                ELSE DATA_TYPE
            END AS COL_DATA_TYPE,
            (
                SELECT PG_CATALOG.COL_DESCRIPTION(C.OID, COLS.ORDINAL_POSITION::INT)
                FROM PG_CATALOG.PG_CLASS C
                WHERE C.OID = (SELECT COLS.TABLE_NAME::REGCLASS::OID) AND C.RELNAME = COLS.TABLE_NAME
            ) AS COL_COLUMN_COMMENT
        FROM INFORMATION_SCHEMA.COLUMNS cols
        LEFT JOIN INFORMATION_SCHEMA.TABLE_CONSTRAINTS tc ON tc.TABLE_NAME = cols.TABLE_NAME AND cols.TABLE_SCHEMA = tc.CONSTRAINT_SCHEMA AND CONSTRAINT_TYPE = 'PRIMARY KEY'
        LEFT JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE ccu USING (CONSTRAINT_SCHEMA, CONSTRAINT_NAME, COLUMN_NAME)
        WHERE cols.TABLE_NAME = #{tableName}
        ORDER BY COLUMN_ID
    </select>

    <select id="getTablePrimaryKey" resultType="org.chun.codegen.common.vo.TablePrimaryKeyConstraint">
        WITH TABLE_PK_LIST AS (
            SELECT *
            FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS TC
            JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE CCU USING (CONSTRAINT_SCHEMA, CONSTRAINT_NAME)
            JOIN INFORMATION_SCHEMA.COLUMNS C ON C.TABLE_SCHEMA = TC.CONSTRAINT_SCHEMA
                                              AND TC.TABLE_NAME = C.TABLE_NAME
                                              AND CCU.COLUMN_NAME = C.COLUMN_NAME
            WHERE CONSTRAINT_TYPE = 'PRIMARY KEY'
              AND C.TABLE_NAME = #{tableName}
        ), TABLE_GROUP_LIST AS (
            SELECT CONSTRAINT_NAME, COUNT(*)
            FROM TABLE_PK_LIST
            GROUP BY CONSTRAINT_NAME
            HAVING COUNT(*)=1
        )
        SELECT *
        FROM TABLE_PK_LIST TPL
        INNER JOIN TABLE_GROUP_LIST PGL ON TPL.CONSTRAINT_NAME = PGL.CONSTRAINT_NAME
    </select>

</mapper>